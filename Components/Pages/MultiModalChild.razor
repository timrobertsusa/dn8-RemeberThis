<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow-y: auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Cancel">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @Body
            </div>
            <div class="modal-footer">                
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Cancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="OK">OK</button>
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public RenderFragment? Title { get; set; } 

    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public EventCallback<string> EventCallbackToParentMethod { get; set; }


    private string modalDisplay = "none;";
    private string modalClass = "";
    private bool showBackdrop = false;
    private string BtnClicked = String.Empty;

    public void Open()
    {
        modalDisplay = "block;";
        modalClass = "show";
        showBackdrop = true;

    }
    public async Task OK()
    {
        BtnClicked = "OK";
        await SendBtnClickedToParent();
    }
    public async Task Cancel()
    {
        BtnClicked = "Cancel";
        await SendBtnClickedToParent();
    }

    public async Task SendBtnClickedToParent()
    {
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;

        if (EventCallbackToParentMethod.HasDelegate)
        {
            await EventCallbackToParentMethod.InvokeAsync(BtnClicked);
        }       

    }




}